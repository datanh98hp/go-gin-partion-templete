// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*)
FROM users 
WHERE (
    $1::bool IS NULL 
    OR  ($1::bool = TRUE AND user_deleted_at IS NOT NULL )
    OR  ($1::bool = FALSE AND user_deleted_at IS NULL )
)
AND (
    $2::TEXT IS NULL OR
    $2::TEXT = '' OR
    user_email ILIKE '%' || $2 || '%' 
   OR user_fullname ILIKE '%'|| $2 || '%'
)
`

type CountUsersParams struct {
	Deleted *bool   `json:"deleted"`
	Search  *string `json:"search"`
}

func (q *Queries) CountUsers(ctx context.Context, arg CountUsersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, arg.Deleted, arg.Search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_email, user_fullname, user_password, user_age, user_status,user_level) 
VALUES ($1, $2, $3, $4, $5, $6) RETURNING user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at
`

type CreateUserParams struct {
	UserEmail    string `json:"user_email"`
	UserFullname string `json:"user_fullname"`
	UserPassword string `json:"user_password"`
	UserAge      *int32 `json:"user_age"`
	UserStatus   int32  `json:"user_status"`
	UserLevel    int32  `json:"user_level"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserEmail,
		arg.UserFullname,
		arg.UserPassword,
		arg.UserAge,
		arg.UserStatus,
		arg.UserLevel,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserFullname,
		&i.UserPassword,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserDeletedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at FROM users WHERE user_uuid = $1 AND user_deleted_at IS NULL
`

func (q *Queries) GetUserByUUID(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUUID, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserFullname,
		&i.UserPassword,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserDeletedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const getUsersCreatedAtAsc = `-- name: GetUsersCreatedAtAsc :many
SELECT user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at 
FROM users 
WHERE user_deleted_at IS NULL 
AND (
   $3::TEXT IS NULL 
    OR $3::TEXT = ''
    OR user_email ILIKE '%' || $3 || '%' 
    OR user_fullname ILIKE '%'|| $3 || '%'
)
ORDER BY user_created_at ASC
LIMIT $1 OFFSET $2
`

type GetUsersCreatedAtAscParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetUsersCreatedAtAsc(ctx context.Context, arg GetUsersCreatedAtAscParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersCreatedAtAsc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserFullname,
			&i.UserPassword,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserDeletedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCreatedAtDesc = `-- name: GetUsersCreatedAtDesc :many
SELECT user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at 
FROM users 
WHERE user_deleted_at IS NULL 
AND (
    $3::TEXT IS NULL OR
    $3::TEXT = '' OR
    user_email ILIKE '%' || $3 || '%' 
   OR user_fullname ILIKE '%'|| $3 || '%'
)
ORDER BY user_created_at DESC
LIMIT $1 OFFSET $2
`

type GetUsersCreatedAtDescParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetUsersCreatedAtDesc(ctx context.Context, arg GetUsersCreatedAtDescParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersCreatedAtDesc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserFullname,
			&i.UserPassword,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserDeletedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersDeleted = `-- name: GetUsersDeleted :many
SELECT user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at FROM users WHERE user_deleted_at IS NOT NULL
`

func (q *Queries) GetUsersDeleted(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersDeleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserFullname,
			&i.UserPassword,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserDeletedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersIdAsc = `-- name: GetUsersIdAsc :many
SELECT user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at 
FROM users 
WHERE user_deleted_at IS NULL 
AND (
    $3::TEXT IS NULL 
    OR $3::TEXT = ''
    OR user_email ILIKE '%' || $3 || '%'
    OR user_fullname ILIKE '%'|| $3 || '%'
)
ORDER BY user_id ASC
LIMIT $1 OFFSET $2
`

type GetUsersIdAscParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetUsersIdAsc(ctx context.Context, arg GetUsersIdAscParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersIdAsc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserFullname,
			&i.UserPassword,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserDeletedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersIdDesc = `-- name: GetUsersIdDesc :many
SELECT user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at 
FROM users 
WHERE user_deleted_at IS NULL 
AND (
    $3::TEXT IS NULL 
    OR $3::TEXT = ''
    OR user_email ILIKE '%' || $3 || '%' 
    OR user_fullname ILIKE '%'|| $3 || '%'
)
ORDER BY user_id DESC
LIMIT $1 OFFSET $2
`

type GetUsersIdDescParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetUsersIdDesc(ctx context.Context, arg GetUsersIdDescParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersIdDesc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserFullname,
			&i.UserPassword,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserDeletedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreUsers = `-- name: RestoreUsers :one
UPDATE users 
SET 
user_deleted_at = NULL
WHERE user_uuid = $1::uuid AND user_deleted_at IS NOT NULL RETURNING user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at
`

func (q *Queries) RestoreUsers(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, restoreUsers, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserFullname,
		&i.UserPassword,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserDeletedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const softDeleteUserByUUID = `-- name: SoftDeleteUserByUUID :one
UPDATE users 
SET 
user_deleted_at = now()
WHERE user_uuid = $1::uuid AND user_deleted_at IS NULL RETURNING user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at
`

func (q *Queries) SoftDeleteUserByUUID(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, softDeleteUserByUUID, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserFullname,
		&i.UserPassword,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserDeletedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const trashUsers = `-- name: TrashUsers :one
DELETE FROM users 
WHERE user_uuid = $1::uuid AND user_deleted_at IS NOT NULL RETURNING user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at
`

func (q *Queries) TrashUsers(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, trashUsers, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserFullname,
		&i.UserPassword,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserDeletedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const updateUserByUUID = `-- name: UpdateUserByUUID :one
UPDATE users 
SET 
user_fullname = COALESCE($1, user_fullname),
user_password =  COALESCE($2, user_password),
user_age = COALESCE($3, user_age),
user_status =COALESCE($4, user_status),
user_level = COALESCE($5, user_level)
WHERE user_uuid = $6::uuid AND user_deleted_at IS NULL RETURNING user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at
`

type UpdateUserByUUIDParams struct {
	UserFullname *string   `json:"user_fullname"`
	UserPassword *string   `json:"user_password"`
	UserAge      *int32    `json:"user_age"`
	UserStatus   *int32    `json:"user_status"`
	UserLevel    *int32    `json:"user_level"`
	UserUuid     uuid.UUID `json:"user_uuid"`
}

func (q *Queries) UpdateUserByUUID(ctx context.Context, arg UpdateUserByUUIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserByUUID,
		arg.UserFullname,
		arg.UserPassword,
		arg.UserAge,
		arg.UserStatus,
		arg.UserLevel,
		arg.UserUuid,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserFullname,
		&i.UserPassword,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserDeletedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}
