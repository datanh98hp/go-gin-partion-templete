CREATE EXTENSION IF NOT EXISTS "pgcrypto";
--  CREATE TABLE 
CREATE TABLE
	IF NOT EXISTS users (
		user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		user_uuid UUID NOT NULL DEFAULT gen_random_uuid () UNIQUE,
		user_email VARCHAR(100) NOT NULL UNIQUE,
		user_fullname VARCHAR(255) NOT NULL,
		user_password VARCHAR(90) NOT NULL,
		user_age INT check( (user_age >= 18) AND (user_age <= 70)),
		user_status INT NOT NULL DEFAULT 1 check(user_status in (1, 2,3)), 
		user_level INT NOT NULL DEFAULT 2 check(user_level in (1, 2,3)),
		user_deleted_at TIMESTAMPTZ DEFAULT NULL, 
		user_created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
		user_updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
	);

-- CREATE COMMENTS
COMMENT ON COLUMN users.user_age IS '-- age >= 18 && age <= 70 --';
COMMENT ON COLUMN users.user_status IS '-- 1: show, 2: hide  , 3: banned--';
COMMENT ON COLUMN users.user_status IS '-- 1: admintrator, 2: moderator  , 3: member--';
COMMENT ON COLUMN users.user_deleted_at IS '-- deleted at - soft delete row NULL : not deleted  -- ';

-- CREATE INDEXES
CREATE INDEX IF NOT EXISTS user_level_idx ON users (user_level);
CREATE INDEX IF NOT EXISTS user_status_idx ON users (user_status);
CREATE INDEX IF NOT EXISTS user_created_at_idx ON users (user_created_at);
CREATE INDEX IF NOT EXISTS user_deleted_at_idx ON users (user_deleted_at);
CREATE INDEX IF NOT EXISTS user_email_status_idx ON users (user_email,user_status);


--TRIGGER
-- FUNCTION
CREATE OR REPLACE FUNCTION update_user_updated_at_collumn() RETURNS TRIGGER AS $$
BEGIN
	NEW.user_updated_at = now();
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- CALL FUNCTION in TRIGGER
CREATE TRIGGER set_update_user_updated_at
BEFORE UPDATE ON users
FOR EACH
ROW EXECUTE FUNCTION update_user_updated_at_collumn();