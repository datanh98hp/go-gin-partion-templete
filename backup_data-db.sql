--
-- PostgreSQL database dump
--

-- Dumped from database version 17.5
-- Dumped by pg_dump version 17.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: update_user_updated_at_collumn(); Type: FUNCTION; Schema: public; Owner: root
--

CREATE FUNCTION public.update_user_updated_at_collumn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	NEW.user_updated_at = now();
	RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_user_updated_at_collumn() OWNER TO root;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: root
--

CREATE TABLE public.schema_migrations (
    version bigint NOT NULL,
    dirty boolean NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO root;

--
-- Name: users; Type: TABLE; Schema: public; Owner: root
--

CREATE TABLE public.users (
    user_id integer NOT NULL,
    user_uuid uuid DEFAULT gen_random_uuid() NOT NULL,
    user_email character varying(100) NOT NULL,
    user_fullname character varying(255) NOT NULL,
    user_password character varying(90) NOT NULL,
    user_age integer,
    user_status integer DEFAULT 1 NOT NULL,
    user_level integer DEFAULT 2 NOT NULL,
    user_deleted_at timestamp with time zone,
    user_created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT users_user_age_check CHECK (((user_age >= 18) AND (user_age <= 70))),
    CONSTRAINT users_user_level_check CHECK ((user_level = ANY (ARRAY[1, 2, 3]))),
    CONSTRAINT users_user_status_check CHECK ((user_status = ANY (ARRAY[1, 2, 3])))
);


ALTER TABLE public.users OWNER TO root;

--
-- Name: COLUMN users.user_age; Type: COMMENT; Schema: public; Owner: root
--

COMMENT ON COLUMN public.users.user_age IS '-- age >= 18 && age <= 70 --';


--
-- Name: COLUMN users.user_status; Type: COMMENT; Schema: public; Owner: root
--

COMMENT ON COLUMN public.users.user_status IS '-- 1: admintrator, 2: moderator  , 3: member--';


--
-- Name: COLUMN users.user_deleted_at; Type: COMMENT; Schema: public; Owner: root
--

COMMENT ON COLUMN public.users.user_deleted_at IS '-- deleted at - soft delete row NULL : not deleted  -- ';


--
-- Name: users_user_id_seq; Type: SEQUENCE; Schema: public; Owner: root
--

ALTER TABLE public.users ALTER COLUMN user_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.users_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: root
--

COPY public.schema_migrations (version, dirty) FROM stdin;
1	f
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: root
--

COPY public.users (user_id, user_uuid, user_email, user_fullname, user_password, user_age, user_status, user_level, user_deleted_at, user_created_at, user_updated_at) FROM stdin;
\.


--
-- Name: users_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: root
--

SELECT pg_catalog.setval('public.users_user_id_seq', 1, false);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: root
--

ALTER TABLE ONLY public.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: root
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (user_id);


--
-- Name: users users_user_email_key; Type: CONSTRAINT; Schema: public; Owner: root
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_email_key UNIQUE (user_email);


--
-- Name: users users_user_uuid_key; Type: CONSTRAINT; Schema: public; Owner: root
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_uuid_key UNIQUE (user_uuid);


--
-- Name: user_created_at_idx; Type: INDEX; Schema: public; Owner: root
--

CREATE INDEX user_created_at_idx ON public.users USING btree (user_created_at);


--
-- Name: user_deleted_at_idx; Type: INDEX; Schema: public; Owner: root
--

CREATE INDEX user_deleted_at_idx ON public.users USING btree (user_deleted_at);


--
-- Name: user_email_status_idx; Type: INDEX; Schema: public; Owner: root
--

CREATE INDEX user_email_status_idx ON public.users USING btree (user_email, user_status);


--
-- Name: user_level_idx; Type: INDEX; Schema: public; Owner: root
--

CREATE INDEX user_level_idx ON public.users USING btree (user_level);


--
-- Name: user_status_idx; Type: INDEX; Schema: public; Owner: root
--

CREATE INDEX user_status_idx ON public.users USING btree (user_status);


--
-- Name: users set_update_user_updated_at; Type: TRIGGER; Schema: public; Owner: root
--

CREATE TRIGGER set_update_user_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION public.update_user_updated_at_collumn();


--
-- PostgreSQL database dump complete
--

